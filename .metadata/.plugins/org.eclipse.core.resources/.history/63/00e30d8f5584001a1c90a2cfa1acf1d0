package com.bridgelabz.noteservice.service;

import java.time.LocalDateTime;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.bridgelabz.noteservice.constants.Constants;
import com.bridgelabz.noteservice.dto.LabelDTO;
import com.bridgelabz.noteservice.dto.NoteDTO;
import com.bridgelabz.noteservice.dto.ReminderDTO;
import com.bridgelabz.noteservice.dto.Response;
import com.bridgelabz.noteservice.entity.Label;
import com.bridgelabz.noteservice.entity.Note;
import com.bridgelabz.noteservice.exception.NoteException;
import com.bridgelabz.noteservice.repository.LabelRepository;
import com.bridgelabz.noteservice.repository.NoteRepository;
import com.bridgelabz.noteservice.repository.RedisService;
import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@PropertySource("classpath:message.properties")
public class NoteServiceProvider implements NoteService {

	@Autowired
	private NoteRepository noteRepository;

	@Autowired
	private LabelRepository labelRepository;

	@Autowired
	private RedisService redisService;

	@Autowired
	private Environment env;

	@Autowired
	private RestTemplate restTemplate;
	
	@Autowired
	private ObjectMapper objectMapper;

	/**
	 * Creates a new note
	 */
	public void createNote(NoteDTO noteDTO, String token) {

		log.info("Created Note Method");
		log.info(token);
		ResponseEntity<Response> res = restTemplate.getForEntity(Constants.USER_EXIST_URL + "?token={token}",
				Response.class, token);

		if (res.getStatusCode().value() == 200) {
			Long uId = Long.parseLong(res.getBody().getObj().toString());
			Note note = new Note(noteDTO);
			note.setUserId(uId);
			noteRepository.save(note);
			redisService.save(note, uId);
		} else {
			throw new NoteException(404, env.getProperty("104"));
		}
	}

	/**
	 * Update the existing note
	 */
	@Transactional
	public void updateNote(NoteDTO noteDTO, String token, Long noteId) {

		log.info("Update Note Method");
		log.info(token);
		ResponseEntity<Response> res = restTemplate.getForEntity(Constants.USER_EXIST_URL + "?token={token}",
				Response.class, token);

		if (res.getStatusCode().value() == 200) {
			Long uId = Long.parseLong(res.getBody().getObj().toString());
			Note filteredNote = noteRepository.findById(noteId)
					.orElseThrow(() -> new NoteException(404, env.getProperty("105")));
			filteredNote.setTitle(noteDTO.getTitle());
			filteredNote.setDescription(noteDTO.getDescription());
			filteredNote.setColor(noteDTO.getColor());
			filteredNote.setNoteUpdated(LocalDateTime.now());
			noteRepository.save(filteredNote);
			redisService.save(filteredNote, uId);
		} else {
			throw new NoteException(404, env.getProperty("104"));
		}

	}

	/**
	 * Permenentaly delete the existing note
	 */
	@Transactional
	public void deleteNote(String token, Long noteId) {

		log.info("Delete Note Method");
		log.info(token);
		ResponseEntity<Response> res = restTemplate.getForEntity(Constants.USER_EXIST_URL + "?token={token}",
				Response.class, token);

		if (res.getStatusCode().value() == 200) {
			Long uId = Long.parseLong(res.getBody().getObj().toString());
			Note filteredNote = noteRepository.findById(noteId)
					.orElseThrow(() -> new NoteException(404, env.getProperty("105")));

			noteRepository.delete(filteredNote);
			redisService.delete(uId, noteId);
		} else {
			throw new NoteException(404, env.getProperty("104"));
		}
	}

	/**
	 * Moves the existing note to bin
	 */
	@Transactional
	public void moveNoteToTrash(String token, Long noteId) {

		log.info("Move Note to Trash Method");
		log.info(token);
		ResponseEntity<Response> res = restTemplate.getForEntity(Constants.USER_EXIST_URL + "?token={token}",
				Response.class, token);

		if (res.getStatusCode().value() == 200) {
			Long uId = Long.parseLong(res.getBody().getObj().toString());
			Note filteredNote = noteRepository.findById(noteId)
					.orElseThrow(() -> new NoteException(404, env.getProperty("105")));
			filteredNote.setTrash(!filteredNote.isTrash());
			filteredNote.setPin(false);
			filteredNote.setNoteUpdated(LocalDateTime.now());
			noteRepository.save(filteredNote);
			redisService.save(filteredNote, uId);
		} else {
			throw new NoteException(404, env.getProperty("104"));
		}
	}

	/**
	 * Moves the existing note to archive
	 */
	@Transactional
	public void moveNoteToArchive(String token, Long noteId) {

		log.info("Move Note to Archive Method");
		log.info(token);
		ResponseEntity<Response> res = restTemplate.getForEntity(Constants.USER_EXIST_URL + "?token={token}",
				Response.class, token);

		if (res.getStatusCode().value() == 200) {
			Long uId = Long.parseLong(res.getBody().getObj().toString());
			Note filteredNote = noteRepository.findById(noteId)
					.orElseThrow(() -> new NoteException(404, env.getProperty("105")));
			filteredNote.setArchived(!filteredNote.isArchived());
			filteredNote.setPin(false);
			filteredNote.setNoteUpdated(LocalDateTime.now());
			noteRepository.save(filteredNote);
			redisService.save(filteredNote, uId);
		} else {
			throw new NoteException(404, env.getProperty("104"));
		}
	}

	/**
	 * Pin the existing note
	 */
	@Transactional
	public void pinNote(String token, Long noteId) {

		log.info("Move Note to Archive Method");
		log.info(token);
		ResponseEntity<Response> res = restTemplate.getForEntity(Constants.USER_EXIST_URL + "?token={token}",
				Response.class, token);

		if (res.getStatusCode().value() == 200) {
			Long uId = Long.parseLong(res.getBody().getObj().toString());
			Note filteredNote = noteRepository.findById(noteId)
					.orElseThrow(() -> new NoteException(404, env.getProperty("105")));
			filteredNote.setPin(!filteredNote.isPin());
			filteredNote.setArchived(false);
			filteredNote.setNoteUpdated(LocalDateTime.now());
			noteRepository.save(filteredNote);
			redisService.save(filteredNote, uId);
		} else {
			throw new NoteException(404, env.getProperty("104"));
		}
	}

	/**
	 * To change the color of the note
	 */
	@Transactional
	public void changeColorOfNote(String token, Long noteId, String color) {

		log.info("Change color method");
		log.info(token);
		ResponseEntity<Response> res = restTemplate.getForEntity(Constants.USER_EXIST_URL + "?token={token}",
				Response.class, token);

		if (res.getStatusCode().value() == 200) {
			Long uId = Long.parseLong(res.getBody().getObj().toString());
			Note filteredNote = noteRepository.findById(noteId)
					.orElseThrow(() -> new NoteException(404, env.getProperty("105")));
			filteredNote.setColor(color);
			filteredNote.setNoteUpdated(LocalDateTime.now());
			noteRepository.save(filteredNote);
			redisService.save(filteredNote, uId);
		} else {
			throw new NoteException(404, env.getProperty("104"));
		}
	}

	/**
	 * Add the remainder to the note
	 * 
	 * @param token     jwt that contains user token
	 * @param noteId    note id for which we need to add remainder
	 * @param remainder date and time
	 */
	@Transactional
	public void addReminder(String token, Long noteId, ReminderDTO remainder) {
		
		log.info("Add Reminder method");
		log.info(token);
		ResponseEntity<Response> res = restTemplate.getForEntity(Constants.USER_EXIST_URL + "?token={token}",
				Response.class, token);

		if (res.getStatusCode().value() == 200) {
			Long uId = Long.parseLong(res.getBody().getObj().toString());
			Note filteredNote = noteRepository.findById(noteId)
					.orElseThrow(() -> new NoteException(404, env.getProperty("105")));
			filteredNote.setReminder(remainder.getReminder());
			filteredNote.setNoteUpdated(LocalDateTime.now());
			noteRepository.save(filteredNote);
			redisService.save(filteredNote, uId);
		} else {
			throw new NoteException(404, env.getProperty("104"));
		}

	}

	/**
	 * Remove the remainder from note
	 * 
	 * @param token  jwt that contains user token
	 * @param noteId note id from which we need to remove remainder
	 */
	@Transactional
	public void removeReminder(String token, Long noteId) {

		log.info("Remove Reminder method");
		log.info(token);
		ResponseEntity<Response> res = restTemplate.getForEntity(Constants.USER_EXIST_URL + "?token={token}",
				Response.class, token);

		if (res.getStatusCode().value() == 200) {
			Long uId = Long.parseLong(res.getBody().getObj().toString());
			Note filteredNote = noteRepository.findById(noteId)
					.orElseThrow(() -> new NoteException(404, env.getProperty("105")));
			filteredNote.setReminder(null);
			filteredNote.setNoteUpdated(LocalDateTime.now());
			noteRepository.save(filteredNote);
			redisService.save(filteredNote, uId);
		} else {
			throw new NoteException(404, env.getProperty("104"));
		}
	}

	/**
	 * Get all remainder notes
	 * 
	 * @param token jwt that contains user token
	 * @return all notes that have remainder
	 */
	public List<Note> getReminderNotes(String token) {

		log.info("Get Remainder Notes method");
		log.info(token);
		List<Note> notes = getNoteById(token);
		List<Note> filteredNotes = new LinkedList<>();
		notes.forEach(note -> {
			if (!note.isTrash() && note.getReminder() != null)
				filteredNotes.add(note);
		});
		return filteredNotes;
	}

	/**
	 * Get all notes user have
	 */
	public List<Note> getAllNotes(String token) {

		log.info("Get All Notes method");
		log.info(token);
		List<Note> notes = getNoteById(token);
		List<Note> filteredNotes = new LinkedList<>();
		notes.forEach(note -> {
			if (!note.isArchived() && !note.isTrash() && !note.isPin())
				filteredNotes.add(note);
		});
		return filteredNotes;
	}

	/**
	 * To get all the pinned notes
	 */
	public List<Note> getPinnedNotes(String token) {

		log.info("Get Pinned Notes method");
		log.info(token);
		List<Note> notes = getNoteById(token);
		List<Note> filteredNotes = new LinkedList<>();
		notes.forEach(note -> {
			if (note.isPin() && !note.isTrash())
				filteredNotes.add(note);
		});
		return filteredNotes;
	}

	/**
	 * To get all of the archive notes
	 */
	public List<Note> getArchivedNotes(String token) {

		log.info("Get Archive Notes method");
		log.info(token);
		List<Note> notes = getNoteById(token);
		List<Note> filteredNotes = new LinkedList<>();
		notes.forEach(note -> {
			if (note.isArchived() && !note.isTrash())
				filteredNotes.add(note);
		});
		return filteredNotes;
	}

	/**
	 * To get all of the trash notes
	 */
	public List<Note> getTrashNotes(String token) {

		log.info("Get Trash Notes method");
		log.info(token);
		List<Note> notes = getNoteById(token);
		List<Note> filteredNotes = new LinkedList<>();
		notes.forEach(note -> {
			if (note.isTrash())
				filteredNotes.add(note);
		});
		return filteredNotes;
	}

	/**
	 * Get all notes sorted by title
	 */
	public List<Note> sortByTitle(String token) {

		log.info("Get Notes Sorted By Title method");
		log.info(token);
		List<Note> notes = getNoteById(token);

		List<Note> sortedNote = notes.parallelStream().sorted(Comparator.comparing(Note::getTitle))
				.collect(Collectors.toList());

		return sortedNote;
	}

	/**
	 * Get all notes sorted by created time
	 */
	public List<Note> sortByDateAndTime(String token) {

		log.info("Get Notes Sorted By Date&Time method");
		log.info(token);
		List<Note> notes = getNoteById(token);

		List<Note> sotedNote = notes.parallelStream().sorted(Comparator.comparing(Note::getNoteUpdated))
				.collect(Collectors.toList());

		return sotedNote;
	}

	/**
	 * Add or create a label for the note
	 */
	public Response addOrCreateLable(String token, Long noteId, LabelDTO labelDTO) {

		log.info("Add or Create Label Method");
		log.info(token + " " + noteId);
		ResponseEntity<Response> res = restTemplate.getForEntity(Constants.USER_EXIST_URL + "?token={token}",
				Response.class, token);
		if (res.getStatusCode().value() == 200) {
			Long uId = Long.parseLong(res.getBody().getObj().toString());
			Label lb = new Label(labelDTO);
			lb.setUserId(uId);
			Note filteredNote = noteRepository.findById(noteId).orElseThrow(() -> new NoteException(404, "105"));
			boolean exist = filteredNote.getLabels().stream()
					.noneMatch(lbl -> lbl.getLabelName().equalsIgnoreCase(labelDTO.getLabelName()));
			if (exist) {
				boolean exst = labelRepository.findAllByUserId(uId).stream()
						.noneMatch(lbl -> lbl.getLabelName().equalsIgnoreCase(labelDTO.getLabelName()));
				if (exst) {
					lb.getNotes().add(filteredNote);
					labelRepository.save(lb);
					filteredNote.getLabels().add(lb);
					filteredNote.setNoteUpdated(LocalDateTime.now());
					noteRepository.save(filteredNote);
					redisService.save(filteredNote, uId);
					return new Response(HttpStatus.OK.value(), env.getProperty("209"), labelDTO);
				} else {
					Label l = labelRepository.findByLabelName(labelDTO.getLabelName());
					l.getNotes().add(filteredNote);
					labelRepository.save(l);
					filteredNote.getLabels().add(l);
					filteredNote.setNoteUpdated(LocalDateTime.now());
					noteRepository.save(filteredNote);
					redisService.save(filteredNote, uId);
					return new Response(HttpStatus.OK.value(), env.getProperty("210"), labelDTO);
				}
			}
			return new Response(HttpStatus.ALREADY_REPORTED.value(), env.getProperty("106"), labelDTO);
		} else {
			throw new NoteException(404, env.getProperty("104"));
		}
	}

	/**
	 * Remove the perticular label from the note
	 */
	@Transactional
	public Response removeLabel(String token, Long noteId, Long labelId) {

		log.info("Add or Create Label Method");
		log.info(token + " " + noteId);
		ResponseEntity<Response> res = restTemplate.getForEntity(Constants.USER_EXIST_URL + "?token={token}",
				Response.class, token);
		if (res.getStatusCode().value() == 200) {
			Long uId = Long.parseLong(res.getBody().getObj().toString());
			Note filteredNote = noteRepository.findById(noteId).orElseThrow(() -> new NoteException(404, "105"));
			List<Label> labels = filteredNote.getLabels();
			Label label = filteredNote.getLabels().stream().filter(lbl -> lbl.getLabelId().equals(labelId)).findFirst()
					.orElse(null);
			if (label != null) {
				labels.remove(label);
				filteredNote.setNoteUpdated(LocalDateTime.now());
				noteRepository.save(filteredNote);
				redisService.save(filteredNote, uId);
				return new Response(HttpStatus.OK.value(), env.getProperty("211"));
			}
			return new Response(HttpStatus.NOT_FOUND.value(), env.getProperty("107"));
		}

		else {
			throw new NoteException(404, env.getProperty("104"));
		}
	}

	private List<Note> getNoteById(String token) {
		log.info("Get Note By Id Method");
		log.info(token);
		ResponseEntity<Response> res = restTemplate.getForEntity(Constants.USER_EXIST_URL + "?token={token}",
				Response.class, token);
		if (res.getStatusCode().value() == 200) {
			Long uId = Long.parseLong(res.getBody().getObj().toString());
			if (redisService.findAll(uId).size() > 0) {
				log.info("Get Notes through redis");
				return redisService.findAll(uId);
			} else {
				log.info("Get Notes through db");
				
				List<Note> userNotes = noteRepository.findByUserId(uId);
				userNotes.forEach(note -> {
					Map<String, Object> documentMapper = ObjectMapper.convertValue(note, Map.class);
					redisService.save(note, uId);
				});
				return userNotes;
			}
		} else {
			throw new NoteException(404, env.getProperty("104"));
		}

	}

}
